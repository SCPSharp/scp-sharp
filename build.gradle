import org.apache.commons.io.FileUtils

import java.nio.charset.StandardCharsets

buildscript {
    dependencies {
        classpath 'commons-io:commons-io:2.11.0'
    }
}

plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
    id 'net.kyori.indra.license-header' version '2.1.1'
    id 'net.kyori.indra.git' version '2.1.1'
    id 'com.modrinth.minotaur' version '2.1.1'
    id 'maven-publish'
}

group 'scpsharp'
version '1.7'
String fullVersion = "mc${project.minecraft_version}-$project.version"

repositories {
    mavenCentral()
    maven { url 'https://maven.terraformersmc.com/releases/' } // modmenu
    maven { url 'https://maven.shedaniel.me' } // REI
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:1.7.1+kotlin.1.6.10"

    modImplementation 'com.terraformersmc:modmenu:3.1.1'
    modCompileOnly 'me.shedaniel:RoughlyEnoughItems-api-fabric:8.0.442'
    modRuntimeOnly 'me.shedaniel:RoughlyEnoughItems-fabric:8.0.442'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

loom {
    accessWidenerPath.set file("src/main/resources/scpsharp.accesswidener")
}

processResources {
    if(indraGit.describe() != null) {
        inputs.property 'gitVersion', indraGit.describe()
    }
    inputs.property 'projectVersion', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version,
                'fullVersion': "${indraGit.describe()}-$project.version"
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set 17
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.name}" }
    }
    indraGit.applyVcsInformationToManifest(manifest)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}

afterEvaluate {
    tasks.modrinth {
        onlyIf {
            System.getenv('MODRINTH_TOKEN') != null
        }
        dependsOn remapJar
    }
}

modrinth {
    projectId = 'p3O2a1Bc'
    versionNumber = fullVersion
    versionName = fullVersion
    if(indraGit.headTag() == null) {
        changelog = "See git for changelog. Based on git ${indraGit.branchName()} branch ${indraGit.describe()}"
    } else {
        changelog = "See [GitHub](https://github.com/SCPSharp/scp-sharp/releases/tag/${indraGit.headTag().name}) for changelog. Based on git ${indraGit.branchName()} branch ${indraGit.describe()}"
    }

    uploadFile = remapJar

    gameVersions = [ project.minecraft_version ]
    dependencies = []

    syncBodyFrom = FileUtils.readFileToString(rootProject.file('README.md'), StandardCharsets.UTF_8)
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
